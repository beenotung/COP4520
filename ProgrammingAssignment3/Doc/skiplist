strategies:
do it all in one traversal? dynamic programming
less likely that things have changed by the time bottom is reached.
1) determine # of levels
2) create the new node
3) find next bigger key & mark it with cas

...) if #levels = max, return pointer to node

[0420 am]
for each level starting on top, infinite loop:
save cur->next[lv] (as nextnode?)
if nextnode is still smaller, then make it currentnode and continue
if nextnode = new then delete self on all levels and return null
mark cur->next[lv] pointer w/ boolean flag (atomic)
	if successfully marked then do the things, otherwise continue

the things include:
	check that cur->next[lv] = nextnode (otherwise unset boolean and continue)
	set newnode->next[lv] = nextnode
	set curnode->next[lv] = newnode
	break;

impl:

	
// bottom to top
slRemoveSelf(node, prev, minlv, maxlv)
{
	slNode * previous = prev;
	uint8_t curLv = minlv;
	for each level:
	while(previous->next[lv]->key < node->key)
	{
		previous = previous->next[lv] if successfully set boolean flag;
	}
	flag previous->next[lv] (if fail then recursively start over and break)
	if prev->next != node then unflag  and recursively start over
		
	prev->next[lv] = node->next[lv]
	
	
	free(node->next), free(node)
	
	
// todo: add deletion-specific flag
}
[/]


(while)
save next key.
if next key is bigger:
	flag test and set next (if flagged then backtrack:goto last flagged?)
	check delete flag (if deleting then continue. otherwise use cas? save self)
	unflag next

when going down, use last next. unflag if next is bigger
	

slNode * lastFlagged;
slNode * curNode
slNode * tmpNode
uint8_t lv;
for each level:
for(;;):
	tmpNode = curNode->next[lv]
	if(tmpNode->key > curNode->key)
		atomic_fetch_or(node->flag, 2)
		
	atomic or nextpointer,marked

if next is bigger: atomicor next (set flag), else continue
atomicor deleteflag (set no deletion. continue if being deleted)


atomic compare larger?




marked bit stored with next pointer
	what for?

back pointer (for recovery)
	top only or everywhere?

stop flag (set to 1 when delete begins to stop insert)
	each insertion (up) is conditioned on that flag



insert:

go down finding each predecessor,
go back up inserting after each predecessor if stop flag is not set
if stop flag is set, call find local predecessor w/ predecessor as node


find local predecessor(node, level, value)
predecessor = node 
tmpnode = predecessor
while(tmpnode->next is smaller)
	tmpnode next
	if tmpnode doesnt have a stop flag then predecessor = tmpnode
return predecessor
yay!!!
	
if next is smaller
 and no stop flag:	predecessor = next




https://en.wikipedia.org/wiki/Non-blocking_linked_list

each node has a marked bit (supposedly stored w/ the pointer)

nextpointer = 
newnode.next = nextpointer



//back pointer to recover if node is deleted (already in place)

boolean flag "stop" to stop insertion upon deletion


funct listSearch(x,start) returns left.key<k<=right.key (for cleanup, unlinks)

Each insertion is conditioned on the
stop flag of the root remaining unset.



bit stealing:
http://stackoverflow.com/questions/19389243/stealing-bits-from-a-pointers




notes:

It was determined in our locking skiptrie that the skiplist operates faster with a higher number of levels, as opposed to the author's suggested log log u levels (where u is the size of the key space, in this case 2^30). We believed it may have been caused by a bug in the "flipcoins" function which allowed the higher levels to be accessed more frequently.
We also lowered the key space from 2^30 in Assignment 2 to 2^16. This creates many collisions and makes it easier to test the data structure.
We benchmarked the updated code and determined that these two changes had virtually no performance impact, but the code currently runs faster with fewer levels regardless of the level usage (which was decreased from 16 to 4). This benchmark was performed without the remove function, which does not yet properly handle collisions as of 2016-03-09 22:53.


4 threads 500000/thr 50ins 50find 0-65536 keys 4 levels i<slLevels-1
	0.497518s
	0.472353s
	0.487980s
	0.434786s
	0.470747s
	0.469414s

i<32
	0.463904s
	0.449626s
	0.459079s
	0.480962s
	0.465666s
	0.469147s


0-2^30 keys (1073741824 max): 
i<32
	0.477586s
	0.496773s
	0.471164s
i<slLEVELS-1
	0.445102s
	0.487845s
	0.454026s

0-2^30 keys 16-levels
i<slLEVELS-1
	0.549201s
	0.540856s
	0.522749s
i<32
	0.556159s
	0.536760s
	0.524847s

0-2^16 keys 
	0.553510s
	0.528630s
	0.537294s
i<slLEVELS-1
	0.534785s
	0.526325s
	0.523537s

